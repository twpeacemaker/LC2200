Author: Thomas Peacemaker
Created to test the simulator program.

To Start the program
make
./Simulator

Test Programs:
  prog1:
  1 0x00000000 0x93000000 IN   $a0
  2 0x00000004 0xA3000000 OUT  $a0
  3 0x00000008 0x04300003 ADD  $a1 $a0 $a0
  4
  5 0x0000000C 0x17300003 NAND $t1 $a0 $a0
  6 0x00000010 0x24700001 ADDI $a1 $t1 1
  7
  8 0x00000014 0x70000000 HALT
  9

  prog2:
  1                       VAR X 2
  2 0x00000000 0x93000000 IN $a0
  3 0x00000004 0xC400000C LA $a1 X
  4 0x00000008 0x43400000 SW $a0 0x0($a1)
  5 0x0000000C 0x35400000 LW $a2 0x0($a1)
  6 0x00000010 0x70000000 HALT

  prog3:
  1 0x00000000 0x93000000 IN $a0
  2 0x00000004 0x94000000 IN $a1
  3 0x00000008 0x5340000C BEQ $a0 $a1 equal
  4 0x0000000C 0x26000000 ADDI $t0 $zero 0
  5 0x00000010 0xA6000000 OUT $t0
  6 0x00000014 0x70000000 HALT
  7 0x00000018 0x26000001 equal: ADDI $t0 $zero 1
  8 0x0000001C 0xA6000000 OUT $t0
  9 0x00000020 0x70000000 HALT
 10
 11

 prog4:
 1 0x00000000 0x93000000 IN $a0
 2 0x00000004 0x94000000 IN $a1
 3 0x00000008 0xD340000C BGT $a0 $a1 greater
 4 0x0000000C 0x26000000 ADDI $t0 $zero 0
 5 0x00000010 0xA6000000 OUT $t0
 6 0x00000014 0x70000000 HALT
 7 0x00000018 0x26000001 greater: ADDI $t0 $zero 1
 8 0x0000001C 0xA6000000 OUT $t0
 9 0x00000020 0x70000000 HALT

 prog5:
 1 0x00000000 0x91000000 IN  $at
 2                       ;n
 3 0x00000004 0x05000000 ADD $a2 $zero $zero
 4                       ;= counter
 5 0x00000008 0x51500014 back: BEQ $at $a2 next
 6                       ;while(len > counter) {
 7 0x0000000C 0x94000000 IN $a1
 8 0x00000010 0x44D00000 SW $a1 0x0($sp)
 9 0x00000014 0x2DDFFFFC ADDI $sp $sps -4
10 0x00000018 0x25500001 ADDI $a2 $a2 1scs
11 0x0000001C 0x500FFFE8 BEQ $zero $zero back
12                       ;unconditional back
13 0x00000020 0x70000000 next: HALT

prog6:
1 0x00000000 0x93000000 IN $a0
2 0x00000004 0x233FFFFC ADDI $a0 $a0 -4
3 0x00000008 0x70000000 HALT

prog7:
1 0x00000000 0x93000000 IN $a0
2 0x00000004 0x5300000C back: BEQ $a0 $zero halt
3 0x00000008 0xC200000C LA $v0 subtract
4 0x0000000C 0x62F00000 JALR $v0 $ra
5 0x00000010 0xD30FFFF0 BGT $a0 $zero back
6 0x00000014 0x70000000 halt: HALT
7 0x00000018 0x233FFFFF subtract: ADDI $a0 $a0 -1
8 0x0000001C 0xA3000000 OUT $a0
9 0x00000020 0x6F200000 JALR $ra $v0

prog8:
ADD $zero $zero $zero
ADDI $zero $zero 1

1. test if a user can load a program that is not accessible
Terminal:
  > load progNotThere
  ERROR: FILE FAILED TO OPEN

2. test if a user can properly load a program
Terminal:
  > load test/prog1
  > mem 0 20
   0: 0x93000000 -1828716544  4: 0xA3000000 -1560281088  8: 0x04300003 70254595  12: 0x17300003 389021699
   16: 0x24700001 611319809  20: 0x70000000 1879048192

3. test the mem command with no params
Terminal:
  > load test/prog1
  > mem
  0: 0x93000000 -1828716544  4: 0xA3000000 -1560281088  8: 0x04300003 70254595  12: 0x17300003 389021699
  16: 0x24700001 611319809  20: 0x70000000 1879048192  24: 0x00000000 0  28: 0x00000000 0
  32: 0x00000000 0  36: 0x00000000 0  40: 0x00000000 0  44: 0x00000000 0
  48: 0x00000000 0  52: 0x00000000 0  56: 0x00000000 0  60: 0x00000000 0
  64: 0x00000000 0  68: 0x00000000 0  72: 0x00000000 0  76: 0x00000000 0
  .
  .
  .
  4080: 0x00000000 0  4084: 0x00000000 0  4088: 0x00000000 0  4092: 0x00000000 0
  4096: 0x4F52203E 1330782270

4. test the mem command with one param
Terminal:
  > mem 4000
  4000: 0x00000000 0  4004: 0x00000000 0  4008: 0x00000000 0  4012: 0x00000000 0
  4016: 0x00000000 0  4020: 0x00000000 0  4024: 0x00000000 0  4028: 0x00000000 0
  4032: 0x00000000 0  4036: 0x00000000 0  4040: 0x00000000 0  4044: 0x00000000 0
  4048: 0x00000000 0  4052: 0x00000000 0  4056: 0x00000000 0  4060: 0x00000000 0
  4064: 0x00000000 0  4068: 0x00000000 0  4072: 0x00000000 0  4076: 0x00000000 0
  4080: 0x00000000 0  4084: 0x00000000 0  4088: 0x00000000 0  4092: 0x00000000 0
  4096: 0x3A36203E 976625726

5. test mem with 2 commands
Terminal:
  > load test/prog1
  > mem 0 20
   0: 0x93000000 -1828716544  4: 0xA3000000 -1560281088  8: 0x04300003 70254595  12: 0x17300003 389021699
   16: 0x24700001 611319809  20: 0x70000000 1879048192

6. test cpu displays correctly
Terminal:
> cpu
 PC: 0
 $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0xD0000000 (-805306368)  $a0: 0xAE360010 (-1372192752)
 $a1: 0x00007FFF (32767)  $a2: 0x749D0D3D (1956449597)  $t0: 0x00007FFF (32767)  $t1: 0xAE36F168 (-1372130968)
 $t2: 0x00007FFF (32767)  $s0: 0x749E8C33 (1956547635)  $s1: 0x00007FFF (32767)  $s2: 0x00000000 (0)
 $k0: 0x00000000 (0)  $sp: 0x00000000 (0)  $fp: 0x00000000 (0)  $ra: 0x00000000 (0)

 7. test invalid commands
 Terminal:
   > dip'asfjpds'a
  INVALID COMMAND GIVEN

8. test mem with to many commands
Terminal:
  > mem 0 4 5
  INVALID NUMBER OF PARAMS GIVEN TO MEM

9. test mem with params not in factors of 4
Terminal:
  > mem 3
  PARAMETERS ARE INCORRECT
  > mem 4 5
  PARAMETERS ARE INCORRECT
  > mem 5 8
  PARAMETERS ARE INCORRECT
  > mem 5 9
  PARAMETERS ARE INCORRECT

10. if user can put more more than one param to cpu
Terminal:
  > cpu 1
  INVALID NUMBER OF PARAMS GIVEN TO CPU

11. test if the user can exit the program
Terminal:
  > exit

12. test input form the user
Terminal:
  > load test/prog1
  > step 1
  Input: 1
  > cpu
   PC: 4
   $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0xA0000000 (-1610612736)  $a0: 0x00000001 (1)
   $a1: 0xFFFFFFFF (-1)  $a2: 0x749D0D3D (1956449597)  $t0: 0x00007FFF (32767)  $t1: 0xFFFFFFFE (-2)
   $t2: 0x00007FFF (32767)  $s0: 0x749E8C33 (1956547635)  $s1: 0x00007FFF (32767)  $s2: 0x00000000 (0)
   $k0: 0x00000000 (0)  $sp: 0x00000000 (0)  $fp: 0x00000000 (0)  $ra: 0x00000000 (0)

   $a0 took the input correctly

13. test if the program can properly output
Terminal:
  > load test/prog1
  > step 1
  Input: 1
  > cpu
   PC: 4
   $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0xA0000000 (-1610612736)  $a0: 0x00000001 (1)
   $a1: 0xFFFFFFFF (-1)  $a2: 0x749D0D3D (1956449597)  $t0: 0x00007FFF (32767)  $t1: 0xFFFFFFFE (-2)
   $t2: 0x00007FFF (32767)  $s0: 0x749E8C33 (1956547635)  $s1: 0x00007FFF (32767)  $s2: 0x00000000 (0)
   $k0: 0x00000000 (0)  $sp: 0x00000000 (0)  $fp: 0x00000000 (0)  $ra: 0x00000000 (0)
  > step 1
  1

14. test if the program can properly add
  Terminal:
  > load test/prog1
  > step 1
  Input: 1
  > step 1
  1
  > step 1
  > cpu
   PC: 12
   $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0xA0000000 (-1610612736)  $a0: 0x00000001 (1)
   $a1: 0x00000002 (2)  $a2: 0x749D0D3D (1956449597)  $t0: 0x00007FFF (32767)  $t1: 0xFFFFFFFE (-2)
   $t2: 0x00007FFF (32767)  $s0: 0x749E8C33 (1956547635)  $s1: 0x00007FFF (32767)  $s2: 0x00000000 (0)
   $k0: 0x00000000 (0)  $sp: 0x00000000 (0)  $fp: 0x00000000 (0)  $ra: 0x00000000 (0)

   $a1 now correctly holds $a0 + $a0 = 1 + 1

15. test if the program can properly nand
  > load test/prog1
  > step 1
  Input: 1
  > step 1
  1
  > step 1
  > step 1
  > cpu
   PC: 16
   $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0xA0000000 (-1610612736)  $a0: 0x00000001 (1)
   $a1: 0x00000002 (2)  $a2: 0x749D0D3D (1956449597)  $t0: 0x00007FFF (32767)  $t1: 0xFFFFFFFE (-2)
   $t2: 0x00007FFF (32767)  $s0: 0x749E8C33 (1956547635)  $s1: 0x00007FFF (32767)  $s2: 0x00000000 (0)
   $k0: 0x00000000 (0)  $sp: 0x00000000 (0)  $fp: 0x00000000 (0)  $ra: 0x00000000 (0)

   $t1 now properly holds the ~& of 1

16. test if the program an properly addi
  > load test/prog1
  > step 1
  Input: 1
  > step 1
  1
  > step 1
  > step 1
  > step 1
  > cpu
   PC: 20
   $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0xA0000000 (-1610612736)  $a0: 0x00000001 (1)
   $a1: 0xFFFFFFFF (-1)  $a2: 0x749D0D3D (1956449597)  $t0: 0x00007FFF (32767)  $t1: 0xFFFFFFFE (-2)
   $t2: 0x00007FFF (32767)  $s0: 0x749E8C33 (1956547635)  $s1: 0x00007FFF (32767)  $s2: 0x00000000 (0)
   $k0: 0x00000000 (0)  $sp: 0x00000000 (0)  $fp: 0x00000000 (0)  $ra: 0x00000000 (0)

   $a1 now holds the 2s compliment of 1

17. test the program halts when the halt statement is hit
Terminal:
  > load test/prog1
  > step 9
  Input: 1
  1
  Process completed.
  > cpu
  PC: 24
  $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0xA0000000 (-1610612736)  $a0: 0x00000001 (1)
  $a1: 0xFFFFFFFF (-1)  $a2: 0x749D0D3D (1956449597)  $t0: 0x00007FFF (32767)  $t1: 0xFFFFFFFE (-2)
  $t2: 0x00007FFF (32767)  $s0: 0x749E8C33 (1956547635)  $s1: 0x00007FFF (32767)  $s2: 0x00000000 (0)
  $k0: 0x00000000 (0)  $sp: 0x00000000 (0)  $fp: 0x00000000 (0)  $ra: 0x00000000 (0)

18. test the step program works for consecutive steps
Terminal:
  > load test/prog1
  > step 9
  Input: 1
  1
  Process completed.
  > cpu
  PC: 24
  $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0xA0000000 (-1610612736)  $a0: 0x00000001 (1)
  $a1: 0xFFFFFFFF (-1)  $a2: 0x749D0D3D (1956449597)  $t0: 0x00007FFF (32767)  $t1: 0xFFFFFFFE (-2)
  $t2: 0x00007FFF (32767)  $s0: 0x749E8C33 (1956547635)  $s1: 0x00007FFF (32767)  $s2: 0x00000000 (0)
  $k0: 0x00000000 (0)  $sp: 0x00000000 (0)  $fp: 0x00000000 (0)  $ra: 0x00000000 (0)

19. test the IN/OUT would when used in consecutive steps
Terminal:
  > load test/prog1
  > step 9
  Input: 1
  1
  Process completed.
  > cpu
  PC: 24
  $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0xA0000000 (-1610612736)  $a0: 0x00000001 (1)
  $a1: 0xFFFFFFFF (-1)  $a2: 0x749D0D3D (1956449597)  $t0: 0x00007FFF (32767)  $t1: 0xFFFFFFFE (-2)
  $t2: 0x00007FFF (32767)  $s0: 0x749E8C33 (1956547635)  $s1: 0x00007FFF (32767)  $s2: 0x00000000 (0)
  $k0: 0x00000000 (0)  $sp: 0x00000000 (0)  $fp: 0x00000000 (0)  $ra: 0x00000000 (0)

20. test the PC is at the correct location after running a program
Terminal:
  > load test/prog1
  > step 9
  Input: 1
  1
  Process completed.
  > cpu
  PC: 24
  $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0xA0000000 (-1610612736)  $a0: 0x00000001 (1)
  $a1: 0xFFFFFFFF (-1)  $a2: 0x749D0D3D (1956449597)  $t0: 0x00007FFF (32767)  $t1: 0xFFFFFFFE (-2)
  $t2: 0x00007FFF (32767)  $s0: 0x749E8C33 (1956547635)  $s1: 0x00007FFF (32767)  $s2: 0x00000000 (0)
  $k0: 0x00000000 (0)  $sp: 0x00000000 (0)  $fp: 0x00000000 (0)  $ra: 0x00000000 (0)

21 test whether the beq statement works when they are = to each other
Terminal:

  > load test/prog3
  > step 9
  Input: 1
  Input: 1
  1
  Process completed.
  the program gave an output of 1 because the registers were =

22 test whether the beq statement works when they are != to each other
  > load test/prog3
  > step 9
  Input: 1
  Input: 2
  0
  Process completed.
  the program gave an output of 0 because they were not equal

23 test whether the bgt is working correctly when regX !< RegY
Terminal:
  > load test/prog4
  > step 9
  Input: 1
  Input: 2
  0
  Process completed.

24 test whether the bgt is working correctly when regX > RegY
  the program gave an output of 0 becuase 1 !> 2
  > load test/prog4
  > step 9
  Input: 2
  Input: 1
  1
  Process completed.
  the program gave an output of 0 becuase 2 > 1

25 test whether the bgt is working correctly when regX = RegY
  > load test/prog4
  > step 9
  Input: 1
  Input: 1
  0
  Process completed.
  the program gave an output of 0 becuase 1 !> 1

26. test test the LA loads the correct address
Terminal:
> load test/prog2
> step 1
Input: 1
> step 1
> cpu
 PC: 8
 $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0x30000000 (805306368)  $a0: 0x00000001 (1)
 $a1: 0x00000014 (20)  $a2: 0x749D0D3D (1956449597)  $t0: 0x00000000 (0)  $t1: 0xAE36F168 (-1372130968)
 $t2: 0x00007FFF (32767)  $s0: 0x749E8C33 (1956547635)  $s1: 0x00007FFF (32767)  $s2: 0x00000000 (0)
 $k0: 0x00000000 (0)  $sp: 0x00000000 (0)  $fp: 0x00000000 (0)  $ra: 0x00000000 (0)

 $a1 now holds the correct value of 20

27. test if SW is working correctly
Terminal:
  > load test/prog2
  > step 1
  Input: 1
  > step 1
  > cpu
  PC: 8
  $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0x30000000 (805306368)  $a0: 0x00000001 (1)
  $a1: 0x00000014 (20)  $a2: 0x749D0D3D (1956449597)  $t0: 0x00000000 (0)  $t1: 0xAE36F168 (-1372130968)
  $t2: 0x00007FFF (32767)  $s0: 0x749E8C33 (1956547635)  $s1: 0x00007FFF (32767)  $s2: 0x00000000 (0)
  $k0: 0x00000000 (0)  $sp: 0x00000000 (0)  $fp: 0x00000000 (0)  $ra: 0x00000000 (0)
  > step 1
  > mem 0 32
  0: 0x93000000 -1828716544  4: 0xC400000C -1006632948  8: 0x43400000 1128267776  12: 0x35400000 893386752
  16: 0x70000000 1879048192  20: 0x00000001 1  24: 0x00000000 0  28: 0xA6000000 -1509949440
  32: 0x70000000 1879048192
  the address of location now correctly holds the number 1

28. test if the LW is working correctly
Terminal:
  > load test/prog2
  > step 1
  Input: 1
  > step 1
  > cpu
   PC: 8
   $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0x30000000 (805306368)  $a0: 0x00000001 (1)
   $a1: 0x00000014 (20)  $a2: 0x749D0D3D (1956449597)  $t0: 0x00000000 (0)  $t1: 0xAE36F168 (-1372130968)
   $t2: 0x00007FFF (32767)  $s0: 0x749E8C33 (1956547635)  $s1: 0x00007FFF (32767)  $s2: 0x00000000 (0)
   $k0: 0x00000000 (0)  $sp: 0x00000000 (0)  $fp: 0x00000000 (0)  $ra: 0x00000000 (0)
  > step 1
  > mem 0 32
   0: 0x93000000 -1828716544  4: 0xC400000C -1006632948  8: 0x43400000 1128267776  12: 0x35400000 893386752
   16: 0x70000000 1879048192  20: 0x00000001 1  24: 0x00000000 0  28: 0xA6000000 -1509949440
   32: 0x70000000 1879048192
  > step 1
  > cpu
   PC: 16
   $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0x30000000 (805306368)  $a0: 0x00000001 (1)
   $a1: 0x00000014 (20)  $a2: 0x00000001 (1)  $t0: 0x00000000 (0)  $t1: 0xAE36F168 (-1372130968)
   $t2: 0x00007FFF (32767)  $s0: 0x749E8C33 (1956547635)  $s1: 0x00007FFF (32767)  $s2: 0x00000000 (0)
   $k0: 0x00000000 (0)  $sp: 0x00000000 (0)  $fp: 0x00000000 (0)  $ra: 0x00000000 (0)
  > step 1
  Process completed.
  $a0 now correctly holds the value at address 20 with was the integer 1

29. test if the run command runs the program till the halt statement
  > load test/prog3
  > run
  Input: 1
  Input: 2
  0
  Process completed.
  > cpu
  PC: 24
  $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0xD0000000 (-805306368)  $a0: 0x00000001 (1)
  $a1: 0x00000002 (2)  $a2: 0x00000001 (1)  $t0: 0x00000000 (0)  $t1: 0xFFFFFFFE (-2)
  $t2: 0x00007FFF (32767)  $s0: 0x749E8C33 (1956547635)  $s1: 0x00007FFF (32767)  $s2: 0x00000000 (0)
  $k0: 0x00000000 (0)  $sp: 0x00000000 (0)  $fp: 0x00000000 (0)  $ra: 0x00000000 (0)
  > mem 0 28
  0: 0x93000000 -1828716544  4: 0x94000000 -1811939328  8: 0x5340000C 1396703244  12: 0x26000000 637534208
  16: 0xA6000000 -1509949440  20: 0x70000000 1879048192  24: 0x26000001 637534209  28: 0xA6000000 -1509949440

  the process is ran to halt, hit halt at address 20

30. test if the program can insert onto the stack
Terminal:
  ./Simulator 40
  > load test/prog5
  > run
  Input: 5
  Input: 1
  Input: 2
  Input: 3
  Input: 4
  Input: 5
  Process completed.
  > mem
   0: 0x91000000 -1862270976  4: 0x05000000 83886080  8: 0x51500014 1364197396  12: 0x94000000 -1811939328
   16: 0x44D00000 1154482176  20: 0x2DDFFFFC 769654780  24: 0x25500001 625999873  28: 0x500FFFE8 1343225832
   32: 0x70000000 1879048192  36: 0x00000000 0  40: 0x00000000 0  44: 0x00000000 0
   48: 0x00000000 0  52: 0x00000000 0  56: 0x00000000 0  60: 0x00000000 0
   64: 0x00000000 0  68: 0x00000000 0  72: 0x00000000 0  76: 0x00000000 0
   80: 0x00000000 0  84: 0x00000000 0  88: 0x00000000 0  92: 0x00000000 0
   96: 0x00000000 0  100: 0x00000000 0  104: 0x00000000 0  108: 0x00000000 0
   112: 0x00000000 0  116: 0x00000000 0  120: 0x00000000 0  124: 0x00000000 0
   128: 0x00000000 0  132: 0x00000000 0  136: 0x00000000 0  140: 0x00000005 5
   144: 0x00000004 4  148: 0x00000003 3  152: 0x00000002 2  156: 0x00000001 1

31. test if the program can account for neg number being contained in the offset
    or signed_value
Terminal:
  > load test/prog6
  > run
  Input: 1
  Process completed.
  > cpu
   PC: 12
   $zero: 0x00000000 (0)  $at: 0x00000005 (5)  $v0: 0xF0000000 (-268435456)  $a0: 0xFFFFFFFD (-3)
   $a1: 0x00000005 (5)  $a2: 0x00000005 (5)  $t0: 0x00007FFF (32767)  $t1: 0xAE36F168 (-1372130968)
   $t2: 0x00007FFF (32767)  $s0: 0x749E8C33 (1956547635)  $s1: 0x00007FFF (32767)  $s2: 0x00000000 (0)
   $k0: 0x00000000 (0)  $sp: 0x0000009C (156)  $fp: 0x00000000 (0)  $ra: 0x00000000 (0)

32. test if the $zero register can be changed

33. test if jalr command swaps the addresses correctly
Terminal:
  > load test/prog7
  > step 3
  Input: 1
  > cpu
  PC: 12
  $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0x00000018 (24)  $a0: 0x00000001 (1)
  $a1: 0x00007FFF (32767)  $a2: 0x749D0D3D (1956449597)  $t0: 0x00007FFF (32767)  $t1: 0xAE36F168 (-1372130968)
  $t2: 0x00007FFF (32767)  $s0: 0x00040273 (262771)  $s1: 0x00007FFF (32767)  $s2: 0x00000000 (0)
  $k0: 0x00000000 (0)  $sp: 0x0000009C (156)  $fp: 0x00000000 (0)  $ra: 0x00000010 (16)
  > step 1
  > cpu
  PC: 24
  $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0x00000018 (24)  $a0: 0x00000001 (1)
  $a1: 0x00007FFF (32767)  $a2: 0x749D0D3D (1956449597)  $t0: 0x00007FFF (32767)  $t1: 0xAE36F168 (-1372130968)
  $t2: 0x00007FFF (32767)  $s0: 0x00040273 (262771)  $s1: 0x00007FFF (32767)  $s2: 0x00000000 (0)
  $k0: 0x00000000 (0)  $sp: 0x0000009C (156)  $fp: 0x00000000 (0)  $ra: 0x00000010 (16)
  > step 2
  0
  > cpu
  PC: 32
  $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0x00000018 (24)  $a0: 0x00000000 (0)
  $a1: 0x00007FFF (32767)  $a2: 0x749D0D3D (1956449597)  $t0: 0x00007FFF (32767)  $t1: 0xAE36F168 (-1372130968)
  $t2: 0x00007FFF (32767)  $s0: 0x00040273 (262771)  $s1: 0x00007FFF (32767)  $s2: 0x00000000 (0)
  $k0: 0x00000000 (0)  $sp: 0x0000009C (156)  $fp: 0x00000000 (0)  $ra: 0x00000010 (16)
  > step 1
  > cpu
  PC: 16
  $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0x00000024 (36)  $a0: 0x00000000 (0)
  $a1: 0x00007FFF (32767)  $a2: 0x749D0D3D (1956449597)  $t0: 0x00007FFF (32767)  $t1: 0xAE36F168 (-1372130968)
  $t2: 0x00007FFF (32767)  $s0: 0x00040273 (262771)  $s1: 0x00007FFF (32767)  $s2: 0x00000000 (0)
  $k0: 0x00000000 (0)  $sp: 0x0000009C (156)  $fp: 0x00000000 (0)  $ra: 0x00000010 (16)
  > run
  Process completed.

34. test add on the $zero register but does not change the value
  > load test/prog8
  > step 1
  > cpu
  PC: 8
  $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0x00000024 (36)  $a0: 0x00000000 (0)
  $a1: 0x00007FFF (32767)  $a2: 0x749D0D3D (1956449597)  $t0: 0x00007FFF (32767)  $t1: 0xAE36F168 (-1372130968)
  $t2: 0x00007FFF (32767)  $s0: 0x00040273 (262771)  $s1: 0x00007FFF (32767)  $s2: 0x00000000 (0)
  $k0: 0x00000000 (0)  $sp: 0x0000009C (156)  $fp: 0x00000000 (0)  $ra: 0x00000010 (16)
  does not error correctly

35. test if user attempts to change the $zero register and the sum us not 0
  > load test/prog8
  > step 1
  > step 1
  ERROR: ZERO REGISTER CAN NOT BE CHANGED.
  > cpu
  PC: 8
  $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0x00000024 (36)  $a0: 0x00000000 (0)
  $a1: 0x00007FFF (32767)  $a2: 0x749D0D3D (1956449597)  $t0: 0x00007FFF (32767)  $t1: 0xAE36F168 (-1372130968)
  $t2: 0x00007FFF (32767)  $s0: 0x00040273 (262771)  $s1: 0x00007FFF (32767)  $s2: 0x00000000 (0)
  $k0: 0x00000000 (0)  $sp: 0x0000009C (156)  $fp: 0x00000000 (0)  $ra: 0x00000010 (16)
  errors correctly but the $zero register is not changed

36. test if the addi command accounts for negative numbers
Terminal:
  > load test/prog7
  > run
  Input: 1
  0
  Process completed.
  > cpu
  PC: 24
  $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0x00000024 (36)  $a0: 0x00000000 (0)
  $a1: 0x00007FFF (32767)  $a2: 0x749D0D3D (1956449597)  $t0: 0x00007FFF (32767)  $t1: 0xAE36F168 (-1372130968)
  $t2: 0x00007FFF (32767)  $s0: 0x749E8C33 (1956547635)  $s1: 0x00007FFF (32767)  $s2: 0x00000000 (0)
  $k0: 0x00000000 (0)  $sp: 0x00000FFC (4092)  $fp: 0x00000000 (0)  $ra: 0x00000010 (16)
  the program added a negative number correct

37. test if the program reads negitive numbers correctly

> load test/prog1
> step 1
Input: -2
> step 1
-2

38. test if the program adds negative numbers correctly
Terminal:
  > load test/prog1
  > step 1
  Input: -2
  > step 1
  -2
  > step 1
  > cpu
  PC: 12
  $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0x00000024 (36)  $a0: 0xFFFFFFFE (-2)
  $a1: 0xFFFFFFFC (-4)  $a2: 0x749D0D3D (1956449597)  $t0: 0x00007FFF (32767)  $t1: 0x00000000 (0)
  $t2: 0x00007FFF (32767)  $s0: 0x749E8C33 (1956547635)  $s1: 0x00007FFF (32767)  $s2: 0x00000000 (0)
  $k0: 0x00000000 (0)  $sp: 0x00000FFC (4092)  $fp: 0x00000000 (0)  $ra: 0x00000010 (16)
  >
  $a1 holds the correct value of -4

39. test if the program add the number to the SW offset correctly

40. test if the program add the number to the LW offset correctly
