1. correctly reads from the file
  > config
  memory_size: 1024
  stack_size: 50
  mem-management: 0
  time-slice: 2

2. To ensure that when one program is load loaded without any other programs
   that that program runs successfully

    > config
    memory_size: 21
    stack_size: 1
    mem-management: 0
    timeslice: 1
    > load test/prog1
    > step 9
    PCB(1) Input: 1
    PCB(1) Output: 1
    PCB(1) completed.

3. test one program loaded will time-slice > 1


    > config
    memory_size: 21
    stack_size: 1
    mem-management: 0
    timeslice: 1
    > load test/prog1
    > step 2
    PCB(1) Input: 1
    PCB(1) Output: 1
    > cpu
     PC: 8
     $zero: 0x00000000 (0)  $at: 0x00000006 (6)  $v0: 0x00000004 (4)  $a0: 0x00000001 (1)
     $a1: 0x00000002 (2)  $a2: 0x00000000 (0)  $t0: 0x00000000 (0)  $t1: 0xFFFFFFFE (-2)
     $t2: 0x00000000 (0)  $s0: 0x00000000 (0)  $s1: 0x00000000 (0)  $s2: 0x64610005 (1684078597)
     $k0: 0x00000000 (0)  $sp: 0x00000018 (24)  $fp: 0x00000000 (0)  $ra: 0x00000000 (0)

4. test one program loaded will time-slice > 1 and more than 2 steps


      > config
      memory_size: 21
      stack_size: 1
      mem-management: 0
      timeslice: 2
      > load test/prog1
      > step 2
      PCB(1) Input: 1
      PCB(1) Output: 1
      > cpu
       PC: 16
       $zero: 0x00000000 (0)  $at: 0x00000006 (6)  $v0: 0x00000004 (4)  $a0: 0x00000001 (1)
       $a1: 0x00000002 (2)  $a2: 0x00000000 (0)  $t0: 0x00000000 (0)  $t1: 0xFFFFFFFE (-2)
       $t2: 0x00000000 (0)  $s0: 0x00000000 (0)  $s1: 0x00000000 (0)  $s2: 0x64610005 (1684078597)
       $k0: 0x00000000 (0)  $sp: 0x00000018 (24)  $fp: 0x00000000 (0)  $ra: 0x00000000 (0)

5. test more than one program are loaded the first completes its required
   steps then context switches to the next and runs the required steps

    > config
    memory_size: 21
    stack_size: 1
    mem-management: 0
    timeslice: 2
    > load test/prog1
    > load test/prog1
    > step 1
    PCB(1) Input: 1
    PCB(1) Output: 1
    > jobs
    Name(2): test/prog1.lce
    PC: 0
    Starting Address: 28
    Ending Address: 48
    Stack Start: 52
    Stack End: 52

    Name(1): test/prog1.lce
    PC: 8
    Starting Address: 0
    Ending Address: 20
    Stack Start: 24
    Stack End: 24
    > step 1
    PCB(2) Input: 1
    PCB(2) Output: 1

6. test more than one program that ones steps are completed queue that the
   program at the beginning of the is context switches back to be successfully
   run

    > config
    memory_size: 21
    stack_size: 1
    mem-management: 0
    timeslice: 2
    > load test/prog1
    > load test/prog1
    > step 1
    PCB(1) Input: 1
    PCB(1) Output: 1
    > jobs
    Name(2): test/prog1.lce
    PC: 0
    Starting Address: 28
    Ending Address: 48
    Stack Start: 52
    Stack End: 52

    Name(1): test/prog1.lce
    PC: 8
    Starting Address: 0
    Ending Address: 20
    Stack Start: 24
    Stack End: 24
    > step 1
    PCB(2) Input: 1
    PCB(2) Output: 1
    > step 10
    PCB(1) completed.
    PCB(2) completed.

7. when more than one program is loaded that it can successfully time-slice
   with steps that are greater than 1

    > config
    memory_size: 21
    stack_size: 1
    mem-management: 0
    timeslice: 2
    > load test/prog1
    > load test/prog1
    > step 1
    PCB(1) Input: 1
    PCB(1) Output: 1
    > jobs
    Name(2): test/prog1.lce
    PC: 0
    Starting Address: 28
    Ending Address: 48
    Stack Start: 52
    Stack End: 52

    Name(1): test/prog1.lce
    PC: 8
    Starting Address: 0
    Ending Address: 20
    Stack Start: 24
    Stack End: 24
    > step 1
    PCB(2) Input: 1
    PCB(2) Output: 1
    > step 10
    PCB(1) completed.
    PCB(2) completed.

8. when the first program is loaded is smaller length than the second program
   when that program 1 is finished it is removed from the queue and the second
   is made ready

    > config
    memory_size: 1024
    stack_size: 50
    mem-management: 0
    timeslice: 2
    > load test/prog1
    > load test/prog9
    > step 100
    PCB(1) Input: 1
    PCB(1) Output: 1
    PCB(2) Input: 3
    PCB(1) completed.
    PCB(2) Input: 1
    PCB(2) Input: 2
    PCB(2) Input: 3
    PCB(2) completed.
    >


9. once a jobs is done running at the start of the queue and there is another
   job on the queue that jobs is removed from the queue and the next jobs is
   readied

   > config
   memory_size: 1024
   stack_size: 50
   mem-management: 0
   timeslice: 2
   > load test/prog1
   > step 2
   PCB(1) Input: 1
   PCB(1) Output: 1
   > load test/prog9
   > step 1
   PCB(1) completed.
   > jobs
   Name(2): test/prog9.lce
   PC: 0
   Starting Address: 224
   Ending Address: 720
   Stack Start: 724
   Stack End: 920
   > step 1
   PCB(2) Input: 1
   >


10. once a jobs is done running and there is another job on the queue
   behind that process on the queue that process us removed correctly

   > config
   memory_size: 1024
   stack_size: 50
   mem-management: 0
   timeslice: 2
   > load test/prog1
   > step 2
   PCB(1) Input: 1
   PCB(1) Output: 1
   > load test/prog9
   > step 1
   PCB(1) completed.
   > jobs
   Name(2): test/prog9.lce
   PC: 0
   Starting Address: 224
   Ending Address: 720
   Stack Start: 724
   Stack End: 920
   > step 1
   PCB(2) Input: 1
   >

11. that context switching is correctly done with more than 2 > processed of
   different length

   time-slice 1

   > config
   memory_size: 1024
   stack_size: 50
   mem-management: 0
   timeslice: 2
   > load test/prog1
   > load test/prog1
   > load test/prog1
   > step 1
   PCB(1) Input: 1
   PCB(1) Output: 1
   > step 1
   PCB(2) Input: 1
   PCB(2) Output: 1
   > step 1
   PCB(3) Input: 1
   PCB(3) Output: 1
   > step 100
   PCB(1) completed.
   PCB(2) completed.
   PCB(3) completed.

12. that when multiple processes are loaded that processes correctly
    adds and utilizes its own physical/relative stack pointer
    > load test/prog5
    > load test/prog5
    > config
    memory_size: 1024
    stack_size: 50
    mem-management: 0
    timeslice: 2
    > jobs
    Name(1): test/prog5.lce
    PC: 0
    Starting Address: 0
    Ending Address: 32
    Stack Start: 36
    Stack End: 232

    Name(2): test/prog5.lce
    PC: 0
    Starting Address: 236
    Ending Address: 268
    Stack Start: 272
    Stack End: 468
    > step 100
    PCB(1) Input: 5
    PCB(2) Input: 5
    PCB(1) Input: 1
    PCB(2) Input: 2
    PCB(1) Input: 1
    PCB(2) Input: 2
    PCB(1) Input: 1
    PCB(2) Input: 2
    PCB(1) Input: 1
    PCB(2) Input: 2
    PCB(1) Input: 1
    PCB(2) Input: 2
    PCB(1) completed.
    PCB(2) completed.
    > mem 36 232
     36: 0x69740A30 1769212464  40: 0x6C73656D 1819501933  44: 0x20656369 543515497
     48: 0x00000A32 2610  52: 0x00000000 0  56: 0x00000000 0  60: 0x00000000 0
     64: 0x00000000 0  68: 0x00000000 0  72: 0x00000000 0  76: 0x00000000 0
     80: 0x00000000 0  84: 0x00000000 0  88: 0x00000000 0  92: 0x00000000 0
     96: 0x00000000 0  100: 0x00000000 0  104: 0x00000000 0  108: 0x00000000 0
     112: 0x00000000 0  116: 0x00000000 0  120: 0x00000000 0  124: 0x00000000 0
     128: 0x00000000 0  132: 0x00000000 0  136: 0x00000000 0  140: 0x00000000 0
     144: 0x00000000 0  148: 0x00000000 0  152: 0x00000000 0  156: 0x00000000 0
     160: 0x00000000 0  164: 0x00000000 0  168: 0x00000000 0  172: 0x00000000 0
     176: 0x00000000 0  180: 0x00000000 0  184: 0x00000000 0  188: 0x00000000 0
     192: 0x00000000 0  196: 0x00000000 0  200: 0x00000000 0  204: 0x00000000 0
     208: 0x00000000 0  212: 0x00000000 0  216: 0x00000001 1  220: 0x00000001 1
     224: 0x00000001 1  228: 0x00000001 1  232: 0x00000001 1
    > mem 272 468
     272: 0x00000000 0  276: 0x00000000 0  280: 0x00000000 0  284: 0x00000000 0
     288: 0x00000000 0  292: 0x00000000 0  296: 0x00000000 0  300: 0x00000000 0
     304: 0x00000000 0  308: 0x00000000 0  312: 0x00000000 0  316: 0x00000000 0
     320: 0x00000000 0  324: 0x00000000 0  328: 0x00000000 0  332: 0x00000000 0
     336: 0x00000000 0  340: 0x00000000 0  344: 0x00000000 0  348: 0x00000000 0
     352: 0x00000000 0  356: 0x00000000 0  360: 0x00000000 0  364: 0x00000000 0
     368: 0x00000000 0  372: 0x00000000 0  376: 0x00000000 0  380: 0x00000000 0
     384: 0x00000000 0  388: 0x00000000 0  392: 0x00000000 0  396: 0x00000000 0
     400: 0x00000000 0  404: 0x00000000 0  408: 0x00000000 0  412: 0x00000000 0
     416: 0x00000000 0  420: 0x00000000 0  424: 0x00000000 0  428: 0x00000000 0
     432: 0x00000000 0  436: 0x00000000 0  440: 0x00000000 0  444: 0x00000000 0
     448: 0x00000000 0  452: 0x00000002 2  456: 0x00000002 2  460: 0x00000002 2
     464: 0x00000002 2  468: 0x00000002 2

    the stack allocated to PCB(3) should also reflect shorted values given

13. when a process is killed in the middle of its steps it removes it correctly
    and rest step properly. not front

    > config
    memory_size: 1024
    stack_size: 50
    mem-management: 0
    timeslice: 2
    > load test/prog1
    > load test/prog1
    > step 2
    PCB(1) Input: 1
    PCB(1) Output: 1
    PCB(2) Input: 2
    PCB(2) Output: 2
    > kill 2
    > jobs
    Name(1): test/prog1.lce
    PC: 8
    Starting Address: 0
    Ending Address: 20
    Stack Start: 24
    Stack End: 220
    > freemem
    Start: 224 - End: 4092
    > load test/prog1
    > step 1
    > jobs
    Name(3): test/prog1.lce
    PC: 0
    Starting Address: 224
    Ending Address: 244
    Stack Start: 248
    Stack End: 444

    Name(1): test/prog1.lce
    PC: 16
    Starting Address: 0
    Ending Address: 20
    Stack Start: 24
    Stack End: 220
    > step 1
    PCB(3) Input: 1
    PCB(3) Output: 1
    > jobs
    Name(1): test/prog1.lce
    PC: 16
    Starting Address: 0
    Ending Address: 20
    Stack Start: 24
    Stack End: 220

    Name(3): test/prog1.lce
    PC: 8
    Starting Address: 224
    Ending Address: 244
    Stack Start: 248
    Stack End: 444
    > kill 1
    > jobs
    Name(3): test/prog1.lce
    PC: 8
    Starting Address: 224
    Ending Address: 244
    Stack Start: 248
    Stack End: 444
    > freemem
    Start: 0 - End: 220
    Start: 448 - End: 4092

14. when a process is killed in the middle of its steps it removes it correctly
    and rest step properly. front

    > config
    memory_size: 1024
    stack_size: 50
    mem-management: 0
    timeslice: 2
    > load test/prog1
    > load test/prog1
    > load test/prog1
    > step 3
    PCB(1) Input: 1
    PCB(1) Output: 1
    PCB(2) Input: 2
    PCB(2) Output: 2
    PCB(3) Input: 3
    PCB(3) Output: 3
    > kill 2
    > jobs
    Name(1): test/prog1.lce
    PC: 8
    Starting Address: 0
    Ending Address: 20
    Stack Start: 24
    Stack End: 220

    Name(3): test/prog1.lce
    PC: 8
    Starting Address: 448
    Ending Address: 468
    Stack Start: 472
    Stack End: 668
