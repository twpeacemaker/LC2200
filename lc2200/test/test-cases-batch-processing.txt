prog1:
  1 0x00000000 0x93000000 IN   $a0
  2 0x00000004 0xA3000000 OUT  $a0
  3 0x00000008 0x04300003 ADD  $a1 $a0 $a0
  4
  5 0x0000000C 0x17300003 NAND $t1 $a0 $a0
  6 0x00000010 0x24700001 ADDI $a1 $t1 1
  7
  8 0x00000014 0x70000000 HALT
  9

prog2:
  1 0x00000000 0x93000000 IN $a0
  2 0x00000004 0x94000000 IN $a1
  3 0x00000008 0x5340000C BEQ $a0 $a1 equal
  4 0x0000000C 0x26000000 ADDI $t0 $zero 0
  5 0x00000010 0xA6000000 OUT $t0
  6 0x00000014 0x70000000 HALT
  7 0x00000018 0x26000001 equal: ADDI $t0 $zero 1
  8 0x0000001C 0xA6000000 OUT $t0
  9 0x00000020 0x70000000 HALT
  10
  11

  1 0x00000000 0x91000000 IN  $at
  2                       ;n
  3 0x00000004 0x05000000 ADD $a2 $zero $zero
  4                       ;= counter
  5 0x00000008 0x51500014 back: BEQ $at $a2 next
  6                       ;while(len > counter) {
  7 0x0000000C 0x94000000 IN $a1
  8 0x00000010 0x44D00000 SW $a1 0x0($sp)
  9 0x00000014 0x2DDFFFFC ADDI $sp $sps -4
 10 0x00000018 0x25500001 ADDI $a2 $a2 1scs
 11 0x0000001C 0x500FFFE8 BEQ $zero $zero back
 12                       ;unconditional back
 13 0x00000020 0x70000000 next: HALT


prog11:
  1 0x00000000 0x95000000 IN $a2
  2 0x00000004 0x03000005 ADD $a0 $zero $a2
  3 0x00000008 0x44300000 SW $a1 0x0($a0)
  4                       ;test out of bounds of prog mem
  5 0x0000000C 0x95000000 IN $a2
  6 0x00000010 0x0D000005 ADD $sp $zero $a2
  7 0x00000014 0x44D00000 SW $a1 0x0($sp)
  8                       ;test out of bounds of stack mem
  9 0x00000018 0x70000000 HALT

prog12:
  1 0x00000000 0x93000000 back: IN $a0
  2 0x00000004 0x53000008 BEQ $a0 $zero halt
  3 0x00000008 0xC40FFFF4 LA $a1 back
  4 0x0000000C 0x64F00000 JALR $a1 $ra
  5 0x00000010 0x70000000 halt: HALT

prog13:
  1                       VAR X 9
  2 0x00000000 0x70000000 HALT
  zeros after

prog14:
  1                       VAR X 11
  2 0x00000000 0x70000000 HALT
  zeros after



1. test the config file
  > config
  memory_size: 1024
  stack_size: 50
  mem-management: 1

2. test jobs prints correctly
  > load test/prog1
  > load test/prog2
  > jobs
  Name(1): test/prog1.lce
  Starting Address: 0
  Ending Address: 20
  Stack Start: 24
  Stack End: 220

  Name(2): test/prog2.lce
  Starting Address: 224
  Ending Address: 248
  Stack Start: 252
  Stack End: 448

  the program should correctly display the jobs in the correct formate


3. test kill at the begining of the queue

  > load test/prog1
  > load test/prog2
  > jobs
  Name(1): test/prog1.lce
  Starting Address: 0
  Ending Address: 20
  Stack Start: 24
  Stack End: 220

  Name(2): test/prog2.lce
  Starting Address: 224
  Ending Address: 248
  Stack Start: 252
  Stack End: 448
  > kill 1
  > jobs
  Name(2): test/prog2.lce
  Starting Address: 224
  Ending Address: 248
  Stack Start: 252
  Stack End: 448

  the prog should be removed from beginning

4. test kill start middle of the queue

  > load test/prog1
  > load test/prog1
  > load test/prog1
  > kill 2
  > jobs
  Name(1): test/prog1.lce
  Starting Address: 0
  Ending Address: 20
  Stack Start: 24
  Stack End: 220

  Name(3): test/prog1.lce
  Starting Address: 448
  Ending Address: 468
  Stack Start: 472
  Stack End: 668

the prog should be removed from the middle of the list

5. test kill start end of the queue

  > load test/prog1
  > load test/prog1
  > load test/prog1
  > kill 3
  > jobs
  Name(1): test/prog1.lce
  Starting Address: 0
  Ending Address: 20
  Stack Start: 24
  Stack End: 220

  Name(2): test/prog1.lce
  Starting Address: 224
  Ending Address: 244
  Stack Start: 248
  Stack End: 444

the prog should be removed from the end

6. test if freemem prints correctly
  > load test/prog1
  > freemem
  Start: 224 - End: 4096
  > load test/prog1
  > load test/prog1
  > freemem
  Start: 672 - End: 4096
  > kill 2
  > freemem
  Start: 224 - End: 444
  Start: 672 - End: 4096
  > kill 1
  > freemem
  Start: 0 - End: 444
  Start: 672 - End: 4096
  > kill 3
  > freemem
  Start: 0 - End: 4096

  the free mem should be broken up appropriate to how they are loaded and killed

7. test if free mem correctly consolidates freemem that is adjacent to each
  other
  > load test/prog1
  > freemem
  Start: 224 - End: 4096
  > load test/prog1
  > load test/prog1
  > freemem
  Start: 672 - End: 4096
  > kill 2
  > freemem
  Start: 224 - End: 444
  Start: 672 - End: 4096
  > kill 1
  > freemem
  Start: 0 - End: 444
  Start: 672 - End: 4096
  > kill 3
  > freemem
  Start: 0 - End: 4096

  freemem should reflect all of memory free and correctly added the
  adjacent freemem blocks

8. test when prog is loaded and no other processes are added that it
    makes that progress ready to run ie, the PC and registers are converted
    to make that process able to run

    > load test/prog1
    > cpu
     PC: 0
     $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0x00000000 (0)  $a0: 0x00000000 (0)
     $a1: 0xD0000000 (-805306368)  $a2: 0x00000000 (0)  $t0: 0xD0000000 (-805306368)  $t1: 0x64610005 (1684078597)
     $t2: 0x00000000 (0)  $s0: 0x00000000 (0)  $s1: 0x00000000 (0)  $s2: 0x00000000 (0)
     $k0: 0xD0000000 (-805306368)  $sp: 0x000000DC (220)  $fp: 0xD0000000 (-805306368)  $ra: 0x00000003 (3)
    > jobs
    Name(1): test/prog1.lce
    Starting Address: 0
    Ending Address: 20
    Stack Start: 24
    Stack End: 220
    > load test/prog2
    > run
    PCB(1) Input: 1
    1
    PCB(1) completed.
    > cpu
     PC: 0
     $zero: 0x00000000 (0)  $at: 0x00000006 (6)  $v0: 0x00000004 (4)  $a0: 0x00000000 (0)
     $a1: 0x00000000 (0)  $a2: 0x00000000 (0)  $t0: 0x00000000 (0)  $t1: 0x00000000 (0)
     $t2: 0xD0000000 (-805306368)  $s0: 0x00000000 (0)  $s1: 0xD0000000 (-805306368)  $s2: 0x64610005 (1684078597)
     $k0: 0xD0000000 (-805306368)  $sp: 0x000000E0 (224)  $fp: 0xD0000000 (-805306368)  $ra: 0x00000000 (0)
    > jobs
    Name(2): test/prog2.lce
    Starting Address: 224
    Ending Address: 248
    Stack Start: 252
    Stack End: 448
    > run
    PCB(2) Input: 1
    PCB(2) completed.

9. test that when a program is ran that it is removed from the queue

  > load test/prog1
  > jobs
  Name(1): test/prog1.lce
  Starting Address: 0
  Ending Address: 20
  Stack Start: 24
  Stack End: 220
  > run
  PCB(1) Input: 1
  1
  PCB(1) completed.
  > jobs
  NO CURRENT JOBS.

  the program should not be in the running queue at this point

10. (context switch) test if more then one prog is loaded, once the first
    prog is ran, the first is removed from the front and is replaced with
    the second

    > load test/prog1
    > jobs
    Name(1): test/prog1.lce
    Starting Address: 0
    Ending Address: 20
    Stack Start: 24
    Stack End: 220
    > run
    PCB(1) Input: 1
    1
    PCB(1) completed.
    > jobs
    NO CURRENT JOBS.
    > load test/prog1
    > load test/prog1
    > run
    PCB(2) Input: 2
    2
    PCB(2) completed.
    > run
    PCB(3) Input: 34
    34
    PCB(3) completed.

    jobs should remove the first process in the second jobs statement
    and move the next to the front

11. (context switch) test if more then one prog is loaded, once the first
    prog is ran, the the cpu and registers, specifically the ($sp) is changed
    to be ready to run the new program

    > load test/prog1
    > cpu
     PC: 0
     $zero: 0x00000000 (0)  $at: 0x00000000 (0)  $v0: 0x00000000 (0)  $a0: 0x00000000 (0)
     $a1: 0xD0000000 (-805306368)  $a2: 0x00000000 (0)  $t0: 0xD0000000 (-805306368)  $t1: 0x64610005 (1684078597)
     $t2: 0x00000000 (0)  $s0: 0x00000000 (0)  $s1: 0x00000000 (0)  $s2: 0x00000000 (0)
     $k0: 0xD0000000 (-805306368)  $sp: 0x000000DC (220)  $fp: 0xD0000000 (-805306368)  $ra: 0x00000003 (3)
    > jobs
    Name(1): test/prog1.lce
    Starting Address: 0
    Ending Address: 20
    Stack Start: 24
    Stack End: 220
    > load test/prog2
    > run
    PCB(1) Input: 1
    1
    PCB(1) completed.
    > cpu
     PC: 0
     $zero: 0x00000000 (0)  $at: 0x00000006 (6)  $v0: 0x00000004 (4)  $a0: 0x00000000 (0)
     $a1: 0x00000000 (0)  $a2: 0x00000000 (0)  $t0: 0x00000000 (0)  $t1: 0x00000000 (0)
     $t2: 0xD0000000 (-805306368)  $s0: 0x00000000 (0)  $s1: 0xD0000000 (-805306368)  $s2: 0x64610005 (1684078597)
     $k0: 0xD0000000 (-805306368)  $sp: 0x000000E0 (224)  $fp: 0xD0000000 (-805306368)  $ra: 0x00000000 (0)
    > jobs
    Name(2): test/prog2.lce
    Starting Address: 224
    Ending Address: 248
    Stack Start: 252
    Stack End: 448
    > run
    PCB(2) Input: 1
    PCB(2) completed.

    the pc should reflect the starting address of prog2 and be at the begin
    of the running queue and stack pointer should reflect the new which is
    correctly 224

21. (context switch) test if more then one prog is loaded, once the first
    prog is ran, it adds that space back to freemem

    > load test/prog1
    > load test/prog1
    > freemem
    Start: 448 - End: 4096
    > run
    PCB(1) Input: 1
    1
    PCB(1) completed.
    > freemem
    Start: 0 - End: 220
    Start: 448 - End: 4096

12. Test first fit
  with mem-management 0
  > load test/prog1
  > load test/prog1
  > jobs
  Name(1): test/prog1.lce
  Starting Address: 0
  Ending Address: 20
  Stack Start: 24
  Stack End: 100

  Name(2): test/prog1.lce
  Starting Address: 104
  Ending Address: 124
  Stack Start: 128
  Stack End: 204
  > kill 1
  > load test/prog1
  > jobs
  Name(2): test/prog1.lce
  Starting Address: 104
  Ending Address: 124
  Stack Start: 128
  Stack End: 204

  Name(3): test/prog1.lce
  Starting Address: 0
  Ending Address: 20
  Stack Start: 24
  Stack End: 100

  the program should be inserted between 1 and 3

13. Test best fit
  > load test/prog12
  > load test/prog13
  > load test/prog12
  > load test/prog12
  > load test/prog12
  > kill 2
  > kill 4
  > freemem
  Start: 100 - End: 216
  Start: 320 - End: 416
  Start: 520 - End: 4096
  > load test/prog12
  > jobs
  Name(1): test/prog12.lce
  Starting Address: 0
  Ending Address: 16
  Stack Start: 20
  Stack End: 96

  Name(3): test/prog12.lce
  Starting Address: 220
  Ending Address: 236
  Stack Start: 240
  Stack End: 316

  Name(5): test/prog12.lce
  Starting Address: 420
  Ending Address: 436
  Stack Start: 440
  Stack End: 516

  Name(6): test/prog12.lce
  Starting Address: 320
  Ending Address: 336
  Stack Start: 340
  Stack End: 416

  the program should insert between 3 and 5

14. test that stack can be separated from prog change

  > config
  memory_size: 1024
  stack_size: 10
  mem-management: 1
  > load test/prog1
  > load test/prog1
  > kill 1
  > load test/prog9
  > jobs
  Name(2): test/prog1.lce
  Starting Address: 64
  Ending Address: 84
  Stack Start: 88
  Stack End: 124

  Name(3): test/prog9.lce
  Starting Address: 128
  Ending Address: 624
  Stack Start: 0
  Stack End: 36

  the program should be loaded between 1 and 3 but stack will be added to the
  end of memory, should run correctly and add to the stack

  and stack can be inserted

  > config
  memory_size: 1024
  stack_size: 3
  mem-management: 0
  > load test/prog6
  > load test/prog6
  > kill 1
  > load test/prog5
  > kill 2
  > run
  PCB(3) Input: 3
  PCB(3) Input: 3
  PCB(3) Input: 2
  PCB(3) Input: 1
  PCB(3) completed.
  > mem 0 8
   0: 0x00000001 1  4: 0x00000002 2  8: 0x00000003 3


15. test out of bounds of the stack space(x > MAX_STACK)
  stack_size 3
  > load test/prog11
  > run
  PCB(1) Input: 88
  ERROR: ATTEMPTING TO ACCESS MEMORY OUT OF BOUNDS, PROCESS TERMINATED.

16. test out of bounds of the stack space(x < MIN_STACK)
  stack_size 3
  > load test/prog10
  > run
  ERROR: ATTEMPTING TO ACCESS MEMORY OUT OF BOUNDS, PROCESS TERMINATED.


  throws error


19. test program that does not does not have space to be loaded
    NOTE: at this point it is tested that stack space and prog space can
    be separated

  > load test/prog9
  ERROR: OUT OF MEMORY
  > config
  memory_size: 10
  stack_size: 3
  mem-management: 0
