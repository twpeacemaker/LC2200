Very thorough test cases with good explanations.

In your Terminal class, the Machine could be a static object, since
every terminal _will_ need the a Machine.
//done
You have
// Constructor
// Pre:  @param char * memory_size, the memory size to send to the Machine
// Post: makes the Machine and sets the memory size
Terminal::Terminal(char * memory_size_char) {
  int memory_size = arrayToInt(memory_size_char);
  running = false;
  machine = new Machine(memory_size);
}
You should check if memory_size is positive.
//done

You have
// Pre:
// Post: @return a array of characters that was given from input if the input
//       is not an valid input it will re-ask the user until valid input is
//       taken
char * Terminal::getInput() {
It seems that you are expecting the input to be a valid number. Your
pre/post do not say that.
//done

You have
Terminal::~Terminal() {
  //noting to be deleted
}
but, you do need to delete memory since it is dynamically allocated.
//done - ask about

In your MyString class you have
  int maxIntSize;   // the max size of added integers
What is the purpose of this? Is it needed to define a MyString object?
  Your CI does not mention this member data object.
//done

You have
// Pre : char * ch is the string of characters to be added
// Post: we will call the add function on each of the characters
void MyString::addString(char * ch){
  int index = 0;
  while (ch[index] != '\0'){
    add(ch[index]);
    index++;
  }
}
You can make it more efficient by calculating the required size for
this object and ch, and then allocating space for that much. This will
reduce the number of calls you make to new and delete in the process
of array doubling.
//done

You have
// Pre : the integer is less then or equal to maxIntSize
//        digits long
//       this object is defined
// Post: we will convert the integer into a char array
//       we will then add the char array to the mystring
void MyString::addInt(int ch){
Since you are making a MyString object eventually, you may as well
parse the integer for its characters and add them to your MyString
object. You need the manIntSize just for this purpose, and this is a
bit of a hack.
//done - taken out

You have
// Pre : MyLines object is defined and statisfies the CI
//       requested is an integer
// Post: OS contains the requested index
char MyString::requestindex(int index){
Be more precise with your pre/post conditions. What is "requested"? Is
index within bounds of the string length?
//done

You have
    //PRE:  @param int index, index of memory
    //POST: @return memory[index]
    int getIndex(int index);
in the Memory class. Is this the index in the array? Is this something
    any client of the memory class would use? Your function should get
    an address as a parameter, and thus an unsigned int, and should
    return an unsigned int. Also, this member function should be a
    const function.
//done

You have
    //PRE:  @param char * input, takes the input from the terminal
    //      @param char * output, takes the output to be build up
    //POST: @return the array to sent to the terminal to display
    char * getOutput(char * input);
in the Memory class. What kind of input is the function taking from
    the terminal? What is the output? Be precise/correct and complete
    with your pre/post conditions.
//done

You have
    //PRE: @param int index, takes the index of memory
    //POST:@return char* creates appropriate string to add to the cols
    char * getMemCommandCol(int index);
What does this mean? What are the cols? What is an appropriate string?

getSize, getLastAddress should be const functions.
//done

Use exceptions for useful functions, e.g, getBits. As it stand, if
there is an error, it will be printed out effectively by your machine,
and not by the shell.
//done

Very good program structure.

Test Cases     30/30
Correctness    40/40
Documentation  20/25
Submission      5/5


Total          95/100
